# This file describes an application. You can have multiple applications
# in the same project.
#
# See https://docs.platform.sh/user_guide/reference/platform-app-yaml.html

# The name of this app. Must be unique within a project.
name: app

# The runtime the application uses.
type: php:8.1

dependencies:
    php:
        composer/composer: '^2'

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
  database: "dbc:mysql"
  redis: 'cache:redis'

build:
  flavor: none

# Add additional PHP extensions.
runtime:
  extensions:
    - iconv
    - dom
    - simplexml
    - exif
    - opcache
    - imagick
    - fileinfo
    - apcu
    - sodium

variables:
  php:
    memory_limit: 128M
    opcache.enable: 1 # enables the Opcache for PHP server
    opcache.enable_cli: 1 # enables the Opcache for CLI mode
    opcache.jit_buffer_size: 256M # JIT buffer memory size. 0 value disables the JIT compiler.
    opcache.max_accelerated_files: 20000 # https://symfony.com/doc/current/performance.html#configure-opcache-for-maximum-performance
    opcache.memory_consumption: 256 # https://symfony.com/doc/current/performance.html#configure-opcache-for-maximum-performance
    opcache.validate_timestamps: 0 # https://symfony.com/doc/current/performance.html#don-t-check-php-files-timestamps
    #opcache.preload: /app/config/preload.php #https://symfony.com/doc/current/performance.html#use-the-opcache-class-preloading
    #opcache.preload_user: web # https://symfony.com/doc/current/performance.html#use-the-opcache-class-preloading
    realpath_cache_size: 4096K # https://symfony.com/doc/current/performance.html#configure-the-php-realpath-cache
    realpath_cache_ttl: 600 # https://symfony.com/doc/current/performance.html#configure-the-php-realpath-cache


# The 'mounts' describe writable, persistent filesystem mounts in the application.
mounts:
    # According to https://pimcore.com/docs/pimcore/current/Development_Documentation/Installation_and_Upgrade/System_Setup_and_Hosting/File_Permissions.html
    # Pimcore should only need write access to ./var and ./public/var
    "var":
      source: "local"
      source_path: "var"
    "public/var":
      source: "local"
      source_path: "public_var"
    #The link above doesn't mention /public/bundles, but in testing we DO need it to be writable.
    "public/bundles":
      source: "local"
      source_path: "web_bundles"
    #similar to above, though it's not mentioned, something needs to write database.yaml to this location
    "config/local":
      source: "local"
      source_path: "config_local"

# The configuration of app when it is exposed to the web.
web:
  locations:
    '/':
      root: "public"
      passthru: "/index.php"
      allow: true
      rules:
#        '^/videos/(?<resource>.*)$':
#          allow: true
#        '^/img/(?<resource>.*)$':
#          allow: true
#        '^/static/(?<resource>.*)$':
#          allow: true
        '^(?!/var/tmp)(?<thumbnail>.*/(image|video)-thumb__[\d+]__.*)$':
          allow: true
          passthru: '/var/tmp/thumbnails$thumbnail'
          expires: 2w
        '^(?!/admin|/var)(?<asset>(.+?)\.((?:css|js)(?:\.map)?|jpe?g|gif|png|svgz?|eps|exe|gz|zip|mp\d|m4a|ogg|ogv|webm|pdf|docx?|xlsx?|pptx?))$':
          allow: true
          passthru: '/var/assets$asset'
          expires: 2w
        # b) Prevent clients from accessing hidden files (starting with a dot)
        # Access to `/.well-known/` is allowed.
        # https://www.mnot.net/blog/2010/04/07/well-known
        # https://tools.ietf.org/html/rfc5785
        '/\.(?!well-known/)':
          allow: false
        '(?:\.(?:bak|conf(ig)?|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$':
          allow: false

    '/var/assets':
        scripts: false
        rules:
            '\.php$':
                allow: false

# The size of the persistent disk of the application (in MB).
disk: 7168
# fake
# The hooks executed at various points in the lifecycle of the application.
hooks:
  build: |
    set -e
    exifVersion="12.47"  
    bash install-redis.sh 5.3.7

    # This is needed for the installer in the deploy hook.
    curl -sS https://platform.sh/cli/installer | php

    composer install --no-ansi --no-progress --prefer-dist --no-scripts
      
    # install our pimcore dependencies that are not available in this container image      
    ./platform-scripts/install-brew-pack.sh gcc graphviz exiftool poppler poppler-utils ghostscript zopfli 
    
    # Make sure we have our target application directory created
    if [ ! -d "${PLATFORM_APP_DIR}/.libreoffice" ]; then
      echo "creating libreoffice directory"
      mkdir -p "${PLATFORM_APP_DIR}/.libreoffice/bin"
    fi
      
    # Make sure we have a temp directory to store our libreoffice stuff  
    if [ ! -d "${PLATFORM_CACHE_DIR}/libreofficetmp" ]; then
      mkdir "${PLATFORM_CACHE_DIR}/libreofficetmp"
    fi
      
    cd "${PLATFORM_CACHE_DIR}/libreofficetmp"
      
    # have we already extracted the contents from the AppImage?  
    if [ ! -d "./squashfs-root" ]; then
      # image hasnt been extracted. do we even have the image?
      if [ ! -f LibreOffice-still.basic-x86_64.AppImage ]; then
        echo "downloading LibreOffice appimage" 
        wget https://appimage.sys42.eu/LibreOffice-still.basic-x86_64.AppImage
      fi
     
      # make sure we can execute it 
      chmod a+x LibreOffice-still.basic-x86_64.AppImage
      
      # extract the contents
      echo "Extracting the contents of the LibreOffice AppImage"
      ./LibreOffice-still.basic-x86_64.AppImage --appimage-extract
      ls -al ./squashfs-root/
      #now let's delete the AppImage to free up some space
      rm LibreOffice-still.basic-x86_64.AppImage
    fi
     
    #now that we've extracted the contents of the image, we need to figure out the name of the directory we're dealing 
    #with. still.basic is always the latest version of LibreOffice so that means the extracted directory name can change
    #as the version number changes.
    maybeLOdir=$(find . -type d -name "libreoffice*.*" -maxdepth 3);
    printf "What I found for maybeLOdir is : %s\n" "${maybeLOdir}"
    if [ -z "${maybeLOdir}" ]; then
      echo "I was unable to find the latest libreoffice directory in the extracted contents.";
      exit 1;
    else 
      libreOfficeDir=$(basename "${maybeLOdir}")
    fi
    
    printf "libreOfficeDir is now : %s \n" "${libreOfficeDir}"

    # now copy the contents of squashfs-root/opt/"$libreOfficeDir"/program/ to /app/.libreoffice/bin/
    echo "Copying libreoffice files to ${PLATFORM_APP_DIR}/.libreoffice/bin... Files copied: "
    # @todo, the libreoffice directory name can and WILL Change as the version changes. We need to either designate a
    # specic version, and then allow for a manged upgrade, or check the name of the directory after we run the 
    # --appimage-extract command to find out the name of the directory we're working with.
    cp -Rvf ./squashfs-root/opt/${libreOfficeDir}/program/* "${PLATFORM_APP_DIR}/.libreoffice/bin/" | wc -l
      
    #add our libreoffice path to PATH
    echo 'export PATH="'$PLATFORM_APP_DIR'/.libreoffice/bin${PATH+:$PATH}";' >> "${PLATFORM_APP_DIR}/.environment"

    #next up is facedetect. https://gitlab.com/wavexx/facedetect/-/tree/master/
    if [ ! -f "${PLATFORM_CACHE_DIR}/facedetect" ]; then
      wget -P "${PLATFORM_CACHE_DIR}" https://gitlab.com/wavexx/facedetect/-/blob/5f9b9121001bce20f7d87537ff506fcc90df48ca/facedetect
      chmod a+x "${PLATFORM_CACHE_DIR}/facedetect"
    fi
    cp -vf "${PLATFORM_CACHE_DIR}/facedetect" "${PLATFORM_APP_DIR}/.libreoffice/bin/facedetect"

    #next is exiftool
    if [ ! -d "${PLATFORM_CACHE_DIR}/Image-ExifTool-${exifVersion}" ]; then
      echo "retrieving https://exiftool.org/Image-ExifTool-${exifVersion}.tar.gz"
      wget -P "${PLATFORM_CACHE_DIR}" https://exiftool.org/Image-ExifTool-${exifVersion}.tar.gz
      cd "${PLATFORM_CACHE_DIR}"
      tar -xvf Image-ExifTool-${exifVersion}.tar.gz
      # get rid of the archive since we've cached the contents
      rm "${PLATFORM_CACHE_DIR}/Image-ExifTool-${exifVersion}.tar.gz"
      cd "${PLATFORM_CACHE_DIR}/Image-ExifTool-${exifVersion}/"
      perl Makefile.PL
    fi
    
    #make sure we have a bin in .global
    mkdir -p "${PLATFORM_APP_DIR}/.global/bin"
    cp -Rvf "${PLATFORM_CACHE_DIR}/Image-ExifTool-${exifVersion}/lib" "${PLATFORM_APP_DIR}/.global/bin"
    cp -vf "${PLATFORM_CACHE_DIR}/Image-ExifTool-${exifVersion}/exiftool" "${PLATFORM_APP_DIR}/.global/bin"
   
    #now Chromium!
    if [ ! -d "${PLATFORM_CACHE_DIR}/chromium" ] || [ ! -d "${PLATFORM_CACHE_DIR}/chromium/.git"  ]; then
      git clone https://github.com/scheib/chromium-latest-linux.git "${PLATFORM_CACHE_DIR}/chromium/"   
    else 
      git -C "${PLATFORM_CACHE_DIR}/chromium/" pull origin master
    fi
      
    cd "${PLATFORM_CACHE_DIR}/chromium" 
      
    bash "${PLATFORM_CACHE_DIR}/chromium/update.sh"
    #printf "contents of %s:" "${PLATFORM_CACHE_DIR}/chromium"
    #ls -al "${PLATFORM_CACHE_DIR}/chromium"
    #now we need to copy the contents of the symlink "latest" over into the app directory
    mkdir -p "${PLATFORM_APP_DIR}/.global/bin/chromium"
    cp -Rvf "${PLATFORM_CACHE_DIR}/chromium/latest/." "${PLATFORM_APP_DIR}/.global/bin/chromium"  
    echo 'export PATH="'$PLATFORM_APP_DIR'/.global/bin/chromium${PATH+:$PATH}";' >> "${PLATFORM_APP_DIR}/.environment"

    # And last we have updating ImageMagik to v7
    if [ ! -d "${PLATFORM_CACHE_DIR}/magick" ]; then 
      mkdir -p "${PLATFORM_CACHE_DIR}/magick"
    fi
      
    cd "${PLATFORM_CACHE_DIR}/magick"
    
    # Have we already extracted the files?  
    if [ ! -d squashfs-root ]; then
        echo "Retrieving updated imagick binaries..."
        # ok do we even have the original appimage file?
        if [ ! -f magick ]; then
          echo "Retrieving imagick AppImage file..."
          wget -P "${PLATFORM_CACHE_DIR}/magick" https://imagemagick.org/archive/binaries/magick
          chmod a+x magick
        fi
      
        # Extract the files
        echo "Extracting imagick binaries from AppImage file..."
        ./magick --appimage-extract
        #remove the original download to free up some space
        rm -f magick
    fi
      
    # make sure we have a directory in the app location
    echo "Creating imagick directory in app directory..."
    mkdir -p "${PLATFORM_APP_DIR}/.imagick/bin"
    mkdir -p "${PLATFORM_APP_DIR}/.imagick/lib"  
      
    #now copy our files from squashfs-root/usr/bin/ to 
    printf "Copying imagick files from %s to %s... \n" "${PLATFORM_CACHE_DIR}/magick/squashfs-root/usr/" "${PLATFORM_APP_DIR}/.imagick/"
    cp -Rvf ./squashfs-root/usr/bin/* "${PLATFORM_APP_DIR}/.imagick/bin"
    cp -Rvf ./squashfs-root/usr/lib/* "${PLATFORM_APP_DIR}/.imagick/lib"
    #last add PATH to PATH
    echo "Adding imagick bin path to PATH"  
    echo 'export PATH="'$PLATFORM_APP_DIR'/.imagick/bin/${PATH+:$PATH}";' >> "${PLATFORM_APP_DIR}/.environment"
      
    # we need to temporarily move our var/classes so we can rsync them back into the mount 
    mv var/classes varclassestmp

  deploy: |
    #sync contents of varclassestmp back into var/classes mount
    rsync -av varclassestmp/ var/classes/ 
    
    if [ ! -f public/var/.platform.installed ]; then
        platform sql "ALTER DATABASE CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        # These values are for the inital setup only.  You really need to change them
        # after the site is installed.
        export PIMCORE_INSTALL_ADMIN_USERNAME='admin'
        export PIMCORE_INSTALL_ADMIN_PASSWORD='admin'
        ./vendor/bin/pimcore-install --no-interaction --ignore-existing-config --no-debug
        touch public/var/.platform.installed
    fi

    # Clear env cached
    ./bin/console cache:clear
      
    # get all bundles which are enabled and installable but not yet installed
    BUNDLES="$(
      bin/console pimcore:bundle:list --json \
        | jq --raw-output '
          [
            .[]
            | select(
              .Enabled == true
              and .Installed == false
              and .Installable == true
            )
            | .Bundle
          ]
          | join(" ")
        '
    )"
  
    # Install Pimcore bundles
    for BUNDLE in ${BUNDLES}; do
      bin/console pimcore:bundle:install "${BUNDLE}" --no-interaction --no-post-change-commands
    done
  
  
    # Migrate doctrine migrations
    ./bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
      
    # Rebuild class definitions
    ./bin/console pimcore:deployment:classes-rebuild --create-classes --delete-classes --no-interaction
      
    # Rebuild custom layouts
    ./bin/console pimcore:deployment:custom-layouts-rebuild --create-custom-layouts --delete-custom-layouts --no-interaction
     
    # Install assets from all bundles
    ./bin/console assets:install --symlink --relative
      
    # Warmup cache
    ./bin/console cache:warmup

# The configuration of scheduled execution.
crons:
    pimcore_cron:
        spec: "*/19 * * * *"
        cmd: "bin/console maintenance --async"
